// app/lib/budgetCalculations.ts

/**
 * Ce fichier contient les fonctions et les types nÃ©cessaires au calcul des budgets, des frais et des volumes d'unitÃ©s.
 * Il gÃ¨re diffÃ©rents types de calculs de frais, la convergence de budget client et les spÃ©cificitÃ©s liÃ©es aux impressions.
 * C'est le cÅ“ur logique pour toutes les opÃ©rations financiÃ¨res du projet.
 * NOUVEAU : Permet les calculs mÃªme sans costPerUnit valide (utilise unitVolume = 0)
 * CORRECTION : Accepte maintenant les budgets = 0 (effectue les calculs et retourne 0 partout)
 */

// ==================== TYPES ====================

export type FeeCalculationType = 'Pourcentage budget' | 'Volume d\'unitÃ©' | 'UnitÃ©s' | 'Frais fixe';
export type FeeCalculationMode = 'Directement sur le budget mÃ©dia' | 'Applicable sur les frais prÃ©cÃ©dents';

export interface FeeDefinition {
  id: string;
  name: string;
  calculationType: FeeCalculationType;
  calculationMode: FeeCalculationMode;
  order: number;
  value: number;
  buffer: number;
  customUnits?: number;
  useCustomVolume?: boolean;
  customVolume?: number;
}

export interface BudgetInputs {
  costPerUnit: number;
  realValue?: number;
  fees: FeeDefinition[];
  mediaBudget?: number;
  clientBudget?: number;
  unitType?: string;
  unitTypeDisplayName?: string;
}

export interface FeeDetail {
  feeId: string;
  name: string;
  calculationType: FeeCalculationType;
  calculationMode: FeeCalculationMode;
  baseValue: number;
  calculatedAmount: number;
  units?: number;
}

export interface ConvergenceInfo {
  hasConverged: boolean;
  iterations: number;
  finalDifference: number;
  targetBudget: number;
  actualCalculatedTotal: number;
}

export interface BudgetResults {
  mediaBudget: number;
  totalFees: number;
  clientBudget: number;
  unitVolume: number;
  effectiveBudgetForVolume: number;
  bonusValue: number;
  feeDetails: FeeDetail[];
  convergenceInfo?: ConvergenceInfo;
}

// ==================== UTILITAIRES POUR LES IMPRESSIONS ====================

/**
 * DÃ©termine si le type d'unitÃ© correspond aux impressions.
 * @param {string} unitType - L'identifiant interne du type d'unitÃ©.
 * @param {string} unitTypeDisplayName - Le nom affichÃ© du type d'unitÃ©.
 * @returns {boolean} Vrai si le type d'unitÃ© est une impression, faux sinon.
 */
const isImpressionUnitType = (unitType?: string, unitTypeDisplayName?: string): boolean => {
  if (!unitType && !unitTypeDisplayName) return false;

  const displayName = unitTypeDisplayName?.toLowerCase() || '';
  const typeId = unitType?.toLowerCase() || '';

  return displayName.includes('impression') || typeId.includes('impression');
};

/**
 * Calcule le volume d'unitÃ© en tenant compte du type d'unitÃ© (impressions ou autres).
 * Pour les impressions : (budget Ã· CPM) Ã— 1000 = nombre d'impressions.
 * Pour les autres : budget Ã· coÃ»t unitaire = nombre d'unitÃ©s.
 * ðŸ†• NOUVEAU : Accepte maintenant costPerUnit = 0 et retourne 0 dans ce cas
 * @param {number} effectiveBudget - Le budget effectif Ã  utiliser pour le calcul.
 * @param {number} costPerUnit - Le coÃ»t par unitÃ© ou le CPM.
 * @param {string} unitType - L'identifiant interne du type d'unitÃ©.
 * @param {string} unitTypeDisplayName - Le nom affichÃ© du type d'unitÃ©.
 * @returns {number} Le volume d'unitÃ©s calculÃ©.
 */
const calculateUnitVolume = (
  effectiveBudget: number,
  costPerUnit: number,
  unitType?: string,
  unitTypeDisplayName?: string
): number => {
  // ðŸ†• NOUVEAU : Pas de coÃ»t valide = pas de volume (mais permet les calculs de continuer)
  if (costPerUnit <= 0) {
    return 0;
  }
  
  if (effectiveBudget <= 0) {
    return 0;
  }

  const baseVolume = effectiveBudget / costPerUnit;

  if (isImpressionUnitType(unitType, unitTypeDisplayName)) {
    return Math.round(baseVolume * 1000);
  }

  return Math.round(baseVolume);
};

/**
 * Calcule le budget effectif Ã  partir du volume d'unitÃ©.
 * Pour les impressions : (volume Ã· 1000) Ã— CPM = budget.
 * Pour les autres : volume Ã— coÃ»t unitaire = budget.
 * @param {number} volume - Le volume d'unitÃ©s.
 * @param {number} costPerUnit - Le coÃ»t par unitÃ© ou le CPM.
 * @param {string} unitType - L'identifiant interne du type d'unitÃ©.
 * @param {string} unitTypeDisplayName - Le nom affichÃ© du type d'unitÃ©.
 * @returns {number} Le budget effectif calculÃ©.
 */
const calculateEffectiveBudgetFromVolume = (
  volume: number,
  costPerUnit: number,
  unitType?: string,
  unitTypeDisplayName?: string
): number => {
  if (volume <= 0 || costPerUnit <= 0) {
    return 0;
  }

  if (isImpressionUnitType(unitType, unitTypeDisplayName)) {
    return (volume / 1000) * costPerUnit;
  }

  return volume * costPerUnit;
};

// ==================== VALIDATION ====================

/**
 * Valide les entrÃ©es du budget pour s'assurer qu'elles sont cohÃ©rentes.
 * ðŸ†• NOUVEAU : Ne valide plus que costPerUnit soit > 0, permet maintenant 0
 * ðŸ†• CORRECTION : Accepte maintenant les budgets = 0
 * @param {BudgetInputs} inputs - Les donnÃ©es d'entrÃ©e du budget.
 * @returns {string[]} Une liste d'erreurs de validation, vide si aucune erreur.
 */
export const validateBudgetInputs = (inputs: BudgetInputs): string[] => {
  const errors: string[] = [];

  // ðŸ†• NOUVEAU : Validation optionnelle - avertit seulement si nÃ©gatif
  if (inputs.costPerUnit < 0) {
    errors.push('Le coÃ»t par unitÃ© ne peut pas Ãªtre nÃ©gatif');
  }

  if (inputs.realValue !== undefined && inputs.realValue < 0) {
    errors.push('La valeur rÃ©elle ne peut pas Ãªtre nÃ©gative');
  }

  if (inputs.mediaBudget === undefined && inputs.clientBudget === undefined) {
    errors.push('Un budget mÃ©dia ou client doit Ãªtre spÃ©cifiÃ©');
  }

  // ðŸ†• CORRECTION : Accepte maintenant 0, rejette seulement les valeurs nÃ©gatives
  if (inputs.mediaBudget !== undefined && inputs.mediaBudget < 0) {
    errors.push('Le budget mÃ©dia ne peut pas Ãªtre nÃ©gatif');
  }

  if (inputs.clientBudget !== undefined && inputs.clientBudget < 0) {
    errors.push('Le budget client ne peut pas Ãªtre nÃ©gatif');
  }

  for (const fee of inputs.fees) {
    if (fee.value < 0) {
      errors.push(`La valeur du frais "${fee.name}" ne peut pas Ãªtre nÃ©gative`);
    }

    if (fee.calculationType === 'UnitÃ©s' && (!fee.customUnits || fee.customUnits <= 0)) {
      errors.push(`Le frais "${fee.name}" de type "UnitÃ©s" nÃ©cessite un nombre d'unitÃ©s valide`);
    }
  }

  return errors;
};

// ==================== CALCUL DES FRAIS ====================

/**
 * Calcule le montant total des frais et le dÃ©tail de chaque frais.
 * ðŸ†• NOUVEAU : Fonctionne maintenant mÃªme avec unitVolume = 0 (quand costPerUnit = 0)
 * @param {number} mediaBudget - Le budget mÃ©dia actuel.
 * @param {number} unitVolume - Le volume d'unitÃ©s.
 * @param {FeeDefinition[]} fees - La liste des dÃ©finitions de frais.
 * @param {string} unitType - L'identifiant interne du type d'unitÃ©.
 * @param {string} unitTypeDisplayName - Le nom affichÃ© du type d'unitÃ©.
 * @returns {{ totalFees: number; feeDetails: FeeDetail[] }} Un objet contenant le total des frais et leurs dÃ©tails.
 */
const calculateFees = (
  mediaBudget: number,
  unitVolume: number,
  fees: FeeDefinition[],
  unitType?: string,
  unitTypeDisplayName?: string
): { totalFees: number; feeDetails: FeeDetail[] } => {
  const sortedFees = [...fees].sort((a, b) => a.order - b.order);
  const feeDetails: FeeDetail[] = [];

  let runningMediaBudget = mediaBudget;
  let runningFeesTotal = 0;

  for (const fee of sortedFees) {
    let calculatedAmount = 0;
    let units: number | undefined;

    switch (fee.calculationType) {
      case 'Pourcentage budget':
        const baseForPercentage = fee.calculationMode === 'Directement sur le budget mÃ©dia'
          ? mediaBudget
          : (mediaBudget + runningFeesTotal);
        calculatedAmount = (baseForPercentage * fee.value);
        break;

      case 'Volume d\'unitÃ©':
        // ðŸ†• NOUVEAU : Fonctionne mÃªme si unitVolume = 0 (donnera calculatedAmount = 0)
        const volumeToUse = fee.useCustomVolume && fee.customVolume ? fee.customVolume : unitVolume;
        calculatedAmount = volumeToUse * fee.value / 1000;
        units = volumeToUse;
        break;

      case 'UnitÃ©s':
        if (fee.customUnits && fee.customUnits > 0) {
          calculatedAmount = fee.customUnits * fee.value;
          units = fee.customUnits;
        }
        break;

      case 'Frais fixe':
        calculatedAmount = fee.value;
        break;
    }

    if (fee.buffer > 0) {
      calculatedAmount += (calculatedAmount * fee.buffer) / 100;
    }

    feeDetails.push({
      feeId: fee.id,
      name: fee.name,
      calculationType: fee.calculationType,
      calculationMode: fee.calculationMode,
      baseValue: fee.value,
      calculatedAmount,
      units
    });

    runningFeesTotal += calculatedAmount;
  }

  return {
    totalFees: runningFeesTotal,
    feeDetails
  };
};

// ==================== CALCUL PRINCIPAL MODIFIÃ‰ ====================

/**
 * Calcule le budget complet basÃ© sur les entrÃ©es fournies.
 * Si un budget mÃ©dia est spÃ©cifiÃ©, il calcule le budget client.
 * Si un budget client est spÃ©cifiÃ©, il utilise un processus de convergence pour trouver le budget mÃ©dia correspondant.
 * ðŸ†• NOUVEAU : Fonctionne maintenant mÃªme avec costPerUnit = 0 (unitVolume sera 0)
 * ðŸ†• CORRECTION : Fonctionne maintenant mÃªme avec budget = 0 (tous les calculs retournent 0)
 * @param {BudgetInputs} inputs - Les donnÃ©es d'entrÃ©e pour le calcul du budget.
 * @returns {BudgetResults} Les rÃ©sultats dÃ©taillÃ©s du calcul du budget.
 * @throws {Error} Si aucun budget (mÃ©dia ou client) n'est spÃ©cifiÃ©.
 */
export const calculateBudget = (inputs: BudgetInputs): BudgetResults => {
  const { costPerUnit, realValue, fees, mediaBudget, clientBudget, unitType, unitTypeDisplayName } = inputs;

  if (mediaBudget !== undefined) {
    const bonusValue = realValue ? Math.max(0, realValue - mediaBudget) : 0;
    const effectiveBudgetForVolume = mediaBudget + bonusValue;
    // ðŸ†• NOUVEAU : calculateUnitVolume gÃ¨re maintenant costPerUnit = 0 (retourne 0)
    const unitVolume = calculateUnitVolume(effectiveBudgetForVolume, costPerUnit, unitType, unitTypeDisplayName);
    // ðŸ†• NOUVEAU : calculateFees fonctionne avec unitVolume = 0
    const { totalFees, feeDetails } = calculateFees(mediaBudget, unitVolume, fees, unitType, unitTypeDisplayName);
    const calculatedClientBudget = mediaBudget + totalFees;

    return {
      mediaBudget,
      totalFees,
      clientBudget: calculatedClientBudget,
      unitVolume,
      effectiveBudgetForVolume,
      bonusValue,
      feeDetails
    };
  }

  if (clientBudget !== undefined) {
    return calculateBudgetWithConvergence(inputs);
  }

  throw new Error('Aucun budget spÃ©cifiÃ©');
};

// ==================== CONVERGENCE POUR MODE CLIENT MODIFIÃ‰E ====================

/**
 * Calcule le budget mÃ©dia nÃ©cessaire pour atteindre un budget client cible en utilisant une mÃ©thode de convergence.
 * ðŸ†• NOUVEAU : Fonctionne maintenant mÃªme avec costPerUnit = 0 (unitVolume sera 0)
 * ðŸ†• CORRECTION : Fonctionne maintenant mÃªme avec clientBudget = 0
 * @param {BudgetInputs} inputs - Les donnÃ©es d'entrÃ©e, incluant le budget client cible.
 * @returns {BudgetResults} Les rÃ©sultats dÃ©taillÃ©s du calcul du budget, incluant les informations de convergence.
 * @throws {Error} Si le budget client n'est pas spÃ©cifiÃ©.
 */
const calculateBudgetWithConvergence = (inputs: BudgetInputs): BudgetResults => {
  const { costPerUnit, realValue, fees, clientBudget, unitType, unitTypeDisplayName } = inputs;

  if (clientBudget === undefined) {
    throw new Error('Budget client requis pour ce calcul');
  }

  // ðŸ†• CORRECTION : Cas spÃ©cial pour budget = 0
  if (clientBudget === 0) {
    const unitVolume = 0;
    const { totalFees, feeDetails } = calculateFees(0, unitVolume, fees, unitType, unitTypeDisplayName);
    
    return {
      mediaBudget: 0,
      totalFees,
      clientBudget: totalFees,
      unitVolume: 0,
      effectiveBudgetForVolume: 0,
      bonusValue: 0,
      feeDetails,
      convergenceInfo: {
        hasConverged: true,
        iterations: 0,
        finalDifference: 0,
        targetBudget: 0,
        actualCalculatedTotal: totalFees
      }
    };
  }

  const tolerance = 0.0004;
  const maxIterations = 100;

  let currentMediaBudget = clientBudget * 0.8;
  let bonusValue = 0;
  let iteration = 0;
  let finalDifference = 0;
  let hasConverged = false;

  while (iteration < maxIterations && !hasConverged) {
    bonusValue = realValue ? Math.max(0, realValue - currentMediaBudget) : 0;
    const effectiveBudgetForVolume = currentMediaBudget + bonusValue;
    // ðŸ†• NOUVEAU : calculateUnitVolume gÃ¨re maintenant costPerUnit = 0 (retourne 0)
    const unitVolume = calculateUnitVolume(effectiveBudgetForVolume, costPerUnit, unitType, unitTypeDisplayName);

    // ðŸ†• NOUVEAU : calculateFees fonctionne avec unitVolume = 0
    const { totalFees } = calculateFees(currentMediaBudget, unitVolume, fees, unitType, unitTypeDisplayName);
    const calculatedTotal = currentMediaBudget + totalFees;

    finalDifference = clientBudget - calculatedTotal;

    if (Math.abs(finalDifference) <= tolerance) {
      hasConverged = true;
    } else {
      const adjustmentFactor = 0.8;
      currentMediaBudget += finalDifference * adjustmentFactor;
      currentMediaBudget = Math.max(0.01, currentMediaBudget);
    }

    iteration++;
  }

  bonusValue = realValue ? Math.max(0, realValue - currentMediaBudget) : 0;
  const effectiveBudgetForVolume = currentMediaBudget + bonusValue;
  const unitVolume = calculateUnitVolume(effectiveBudgetForVolume, costPerUnit, unitType, unitTypeDisplayName);
  const { totalFees, feeDetails } = calculateFees(currentMediaBudget, unitVolume, fees, unitType, unitTypeDisplayName);
  const actualCalculatedTotal = currentMediaBudget + totalFees;

  return {
    mediaBudget: currentMediaBudget,
    totalFees,
    clientBudget: actualCalculatedTotal,
    unitVolume,
    effectiveBudgetForVolume,
    bonusValue,
    feeDetails,
    convergenceInfo: {
      hasConverged,
      iterations: iteration,
      finalDifference: clientBudget - actualCalculatedTotal,
      targetBudget: clientBudget,
      actualCalculatedTotal
    }
  };
};

// ==================== NOUVELLES FONCTIONS UTILITAIRES ====================

/**
 * Calcule le volume thÃ©orique Ã  partir d'un budget donnÃ©.
 * Cette fonction est utile pour les validations et les affichages prÃ©liminaires.
 * ðŸ†• NOUVEAU : GÃ¨re maintenant costPerUnit = 0 (retourne 0)
 * @param {number} budget - Le budget Ã  partir duquel calculer le volume.
 * @param {number} costPerUnit - Le coÃ»t par unitÃ©.
 * @param {number} bonusValue - La valeur de bonification, par dÃ©faut 0.
 * @param {string} unitType - L'identifiant interne du type d'unitÃ©.
 * @param {string} unitTypeDisplayName - Le nom affichÃ© du type d'unitÃ©.
 * @returns {number} Le volume thÃ©orique calculÃ©.
 */
export const calculateTheoreticalVolume = (
  budget: number,
  costPerUnit: number,
  bonusValue: number = 0,
  unitType?: string,
  unitTypeDisplayName?: string
): number => {
  const effectiveBudget = budget + bonusValue;
  return calculateUnitVolume(effectiveBudget, costPerUnit, unitType, unitTypeDisplayName);
};

/**
 * Calcule le budget thÃ©orique Ã  partir d'un volume donnÃ©.
 * Cette fonction est utile pour les validations inverses et les scÃ©narios de planification.
 * @param {number} volume - Le volume Ã  partir duquel calculer le budget.
 * @param {number} costPerUnit - Le coÃ»t par unitÃ©.
 * @param {number} bonusValue - La valeur de bonification, par dÃ©faut 0.
 * @param {string} unitType - L'identifiant interne du type d'unitÃ©.
 * @param {string} unitTypeDisplayName - Le nom affichÃ© du type d'unitÃ©.
 * @returns {number} Le budget thÃ©orique calculÃ©.
 */
export const calculateTheoreticalBudget = (
  volume: number,
  costPerUnit: number,
  bonusValue: number = 0,
  unitType?: string,
  unitTypeDisplayName?: string
): number => {
  const effectiveBudget = calculateEffectiveBudgetFromVolume(volume, costPerUnit, unitType, unitTypeDisplayName);
  return Math.max(0, effectiveBudget - bonusValue);
};

/**
 * VÃ©rifie si le type d'unitÃ© nÃ©cessite un traitement spÃ©cial pour les impressions.
 * @param {string} unitType - L'identifiant interne du type d'unitÃ©.
 * @param {string} unitTypeDisplayName - Le nom affichÃ© du type d'unitÃ©.
 * @returns {boolean} Vrai si c'est un type d'impression, faux sinon.
 */
export const isImpressionType = isImpressionUnitType;

/**
 * Formate une explication textuelle du calcul du volume selon le type d'unitÃ©.
 * ðŸ†• NOUVEAU : GÃ¨re maintenant le cas oÃ¹ costPerUnit = 0
 * @param {number} budget - Le budget utilisÃ© dans le calcul.
 * @param {number} costPerUnit - Le coÃ»t par unitÃ© ou le CPM.
 * @param {number} bonusValue - La valeur de bonification.
 * @param {string} unitType - L'identifiant interne du type d'unitÃ©.
 * @param {string} unitTypeDisplayName - Le nom affichÃ© du type d'unitÃ©.
 * @returns {string} L'explication formatÃ©e du calcul.
 */
export const getCalculationExplanation = (
  budget: number,
  costPerUnit: number,
  bonusValue: number,
  unitType?: string,
  unitTypeDisplayName?: string
): string => {
  const effectiveBudget = budget + bonusValue;
  const isImpression = isImpressionUnitType(unitType, unitTypeDisplayName);

  // ðŸ†• NOUVEAU : GÃ¨re le cas oÃ¹ costPerUnit = 0
  if (costPerUnit <= 0) {
    return `Aucun coÃ»t unitaire dÃ©fini - Volume: 0 ${isImpression ? 'impressions' : (unitTypeDisplayName?.toLowerCase() || 'unitÃ©s')}`;
  }

  if (isImpression) {
    return `${effectiveBudget.toFixed(2)}$ Ã· ${costPerUnit.toFixed(4)}$ CPM Ã— 1000 = ${calculateUnitVolume(effectiveBudget, costPerUnit, unitType, unitTypeDisplayName).toLocaleString()} impressions`;
  } else {
    const unitName = unitTypeDisplayName?.toLowerCase() || 'unitÃ©s';
    return `${effectiveBudget.toFixed(2)}$ Ã· ${costPerUnit.toFixed(4)}$ = ${calculateUnitVolume(effectiveBudget, costPerUnit, unitType, unitTypeDisplayName).toLocaleString()} ${unitName}`;
  }
};

// ==================== EXPORT DEFAULT ====================

export default {
  calculateBudget,
  validateBudgetInputs,
  calculateTheoreticalVolume,
  calculateTheoreticalBudget,
  isImpressionType,
  getCalculationExplanation
};