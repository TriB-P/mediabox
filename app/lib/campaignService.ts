// app/lib/campaignService.ts
/**
 * Ce fichier g√®re toutes les op√©rations CRUD (Cr√©ation, Lecture, Mise √† jour, Suppression)
 * li√©es aux campagnes dans Firebase Firestore.
 * Il inclut √©galement la logique pour dupliquer des campagnes enti√®res,
 * cr√©er des versions originales de campagnes et g√©rer les breakdowns par d√©faut associ√©s.
 * C'est le point central pour interagir avec la collection 'campaigns' de Firebase.
 * 
 * ‚úÖ HARMONIS√â : Int√©gration du syst√®me de validation des dates centralis√©
 * ‚úÖ NOUVEAU : Validation avant sauvegarde et calcul automatique des Sprint Dates
 */
import {
  collection,
  doc,
  getDocs,
  addDoc,
  updateDoc,
  deleteDoc,
  query,
  orderBy,
} from 'firebase/firestore';
import { db } from './firebase';
import { 
  Campaign, 
  CampaignFormData, 
  CampaignValidationResult,
  CampaignValidationContext,
  campaignToDateRange
} from '../types/campaign';
import {
  createDefaultBreakdown,
  updateDefaultBreakdownDates,
  ensureDefaultBreakdownExists
} from './breakdownService';
import {
  duplicateCompleteCampaign
} from './campaignDuplicationUtils';
import { addOnglet } from './tactiqueService';

// ‚úÖ NOUVEAUX IMPORTS : Syst√®me de validation des dates
import {
  validateDateRange,
  ValidationResult,
  DateRange
} from './dateValidationService';
import {
  calculateSprintDates,
  isValidDateString,
  formatDateForDisplay,
  daysBetween
} from './dateUtils';
import {
  getErrorMessage,
  formatValidationMessage
} from './validationMessages';

// ==================== FONCTIONS DE VALIDATION SP√âCIALIS√âES CAMPAGNE ====================

/**
 * ‚úÖ NOUVEAU : Valide sp√©cifiquement les donn√©es d'une campagne
 * ‚úÖ MODIFI√â : Sprint Dates toujours calcul√©es automatiquement, aucune validation manuelle
 */
function validateCampaignDates(campaignData: CampaignFormData): CampaignValidationResult {
  const { CA_Start_Date, CA_End_Date } = campaignData;

  // Validation de base des dates (fin >= d√©but)
  const dateErrors = validateDateRange(CA_Start_Date, CA_End_Date, 'CA_');
  
  // ‚úÖ MODIFI√â : Calcul automatique TOUJOURS (ignorer toute valeur manuelle)
  const calculatedSprintDates = calculateSprintDates(CA_Start_Date, CA_End_Date);
  
  // ‚úÖ SUPPRIM√â : Plus de validation des Sprint Dates manuelles
  // Les Sprint Dates sont toujours calcul√©es automatiquement

  return {
    isValid: dateErrors.length === 0,
    errors: dateErrors,
    limits: {}, // Pas de limites pour les campagnes (niveau racine)
    sprintDatesValid: true, // ‚úÖ MODIFI√â : Toujours true car toujours calcul√©es
    calculatedSprintDates
  };
}

/**
 * ‚úÖ NOUVEAU : Valide l'impact d'une modification de campagne sur ses entit√©s enfants
 */
async function validateCampaignModificationImpact(
  clientId: string,
  campaignId: string,
  newDates: DateRange
): Promise<{
  isValid: boolean;
  affectedTactiques: Array<{ id: string; label: string; issue: string }>;
  affectedPlacements: Array<{ id: string; label: string; issue: string }>;
  warnings: string[];
}> {
  // Cette fonction pourrait √™tre √©tendue pour v√©rifier l'impact sur les tactiques/placements existants
  // Pour l'instant, on retourne une validation simple
  return {
    isValid: true,
    affectedTactiques: [],
    affectedPlacements: [],
    warnings: []
  };
}

/**
 * Cr√©e une version "Originale" pour une campagne donn√©e dans Firebase.
 * Cette version est marqu√©e comme officielle et enregistre l'utilisateur et la date de cr√©ation.
 * Cr√©e √©galement un onglet "General" par d√©faut dans cette version.
 * @param CA_Client L'identifiant du client.
 * @param campaignId L'identifiant de la campagne.
 * @param userEmail L'e-mail de l'utilisateur qui cr√©e la version.
 * @returns L'identifiant du document de la version originale cr√©√©e.
 */
async function createOriginalVersion(
  CA_Client: string,
  campaignId: string,
  userEmail: string
): Promise<string> {
  try {
    console.log("FIREBASE: √âCRITURE - Fichier: campaignService.ts - Fonction: createOriginalVersion - Path: clients/${CA_Client}/campaigns/${campaignId}/versions");
    const versionsRef = collection(db, 'clients', CA_Client, 'campaigns', campaignId, 'versions');
    const originalVersion = {
      name: 'Originale',
      isOfficial: true,
      createdAt: new Date().toISOString(),
      createdBy: userEmail,
    };
    const docRef = await addDoc(versionsRef, originalVersion);
    
    console.log("FIREBASE: √âCRITURE - Fichier: campaignService.ts - Fonction: createOriginalVersion - Path: clients/${CA_Client}/campaigns/${campaignId}");
    const campaignRef = doc(db, 'clients', CA_Client, 'campaigns', campaignId);
    await updateDoc(campaignRef, { officialVersionId: docRef.id });

    // Cr√©er l'onglet "General" par d√©faut
    console.log("FIREBASE: √âCRITURE - Fichier: campaignService.ts - Fonction: createOriginalVersion - Path: clients/${CA_Client}/campaigns/${campaignId}/versions/${docRef.id}/onglets");
    await addOnglet(
      CA_Client,
      campaignId,
      docRef.id,
      {
        ONGLET_Name: 'General',
        ONGLET_Order: 0
      }
    );

    return docRef.id;
  } catch (error) {
    console.error('Erreur lors de la cr√©ation de la version originale:', error);
    throw error;
  }
}

/**
 * ‚úÖ OPTIMIS√â : R√©cup√®re toutes les campagnes pour un client donn√©, tri√©es par date de d√©but.
 * SUPPRESSION des appels automatiques √† ensureDefaultBreakdownExists qui causaient des appels r√©p√©t√©s.
 * @param CA_Client L'identifiant du client.
 * @returns Une promesse qui r√©sout en un tableau d'objets Campaign.
 */
export async function getCampaigns(CA_Client: string): Promise<Campaign[]> {
  try {
    console.log("FIREBASE: LECTURE - Fichier: campaignService.ts - Fonction: getCampaigns - Path: clients/${CA_Client}/campaigns");
    const campaignsCollection = collection(db, 'clients', CA_Client, 'campaigns');
    const q = query(campaignsCollection, orderBy('CA_Start_Date', 'desc'));
    const querySnapshot = await getDocs(q);

    const campaigns = querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
    } as Campaign));

    return campaigns;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des campagnes:', error);
    throw error;
  }
}

/**
 * ‚úÖ FONCTION EXISTANTE : V√©rification des breakdowns par d√©faut √† la demande.
 * √Ä appeler seulement quand une campagne est s√©lectionn√©e, pas √† chaque getCampaigns.
 * @param CA_Client L'identifiant du client.
 * @param campaign L'objet campagne.
 */
export async function ensureDefaultBreakdownForCampaign(
  CA_Client: string,
  campaign: Campaign
): Promise<void> {
  if (campaign.CA_Start_Date && campaign.CA_End_Date) {
    try {
      console.log(`‚úÖ V√©rification breakdown par d√©faut pour campagne ${campaign.id}`);
      await ensureDefaultBreakdownExists(
        CA_Client, 
        campaign.id, 
        campaign.CA_Start_Date, 
        campaign.CA_End_Date
      );
    } catch (error) {
      console.warn(`Impossible de v√©rifier le breakdown par d√©faut pour la campagne ${campaign.id}:`, error);
    }
  }
}

/**
 * ‚úÖ MODIFI√â : Cr√©e une nouvelle campagne dans Firebase avec validation des dates int√©gr√©e.
 * Initialise √©galement une version originale et, si n√©cessaire, des breakdowns additionnels ou un breakdown par d√©faut.
 * @param CA_Client L'identifiant du client.
 * @param campaignData Les donn√©es du formulaire de la nouvelle campagne.
 * @param userEmail L'e-mail de l'utilisateur qui cr√©e la campagne.
 * @param additionalBreakdowns Un tableau optionnel de breakdowns √† ajouter lors de la cr√©ation.
 * @returns L'identifiant du document de la campagne cr√©√©e.
 * @throws Error si les donn√©es de campagne ne passent pas la validation.
 */
export async function createCampaign(
  CA_Client: string,
  campaignData: CampaignFormData,
  userEmail: string,
  additionalBreakdowns: any[] = []
): Promise<string> {
  try {
    // ‚úÖ NOUVELLE √âTAPE : Validation des donn√©es avant cr√©ation
    console.log('üìù Validation des donn√©es de campagne...');
    const validation = validateCampaignDates(campaignData);
    
    if (!validation.isValid) {
      const errorMessages = validation.errors.map(error => 
        getErrorMessage(error.code, {
          date: error.field === 'CA_Start_Date' ? campaignData.CA_Start_Date : 
                error.field === 'CA_End_Date' ? campaignData.CA_End_Date : undefined,
          startDate: campaignData.CA_Start_Date,
          endDate: campaignData.CA_End_Date,
          currentLevel: 'campaign'
        })
      );
      
      throw new Error(`Donn√©es de campagne invalides :\n${errorMessages.join('\n')}`);
    }

    console.log("FIREBASE: √âCRITURE - Fichier: campaignService.ts - Fonction: createCampaign - Path: clients/${CA_Client}/campaigns");
    const campaignsCollection = collection(db, 'clients', CA_Client, 'campaigns');
    const now = new Date().toISOString();

    // ‚úÖ MODIFI√â : Sprint Dates TOUJOURS calcul√©es automatiquement (ignorer toute valeur du formulaire)
    const calculatedSprintDates = calculateSprintDates(campaignData.CA_Start_Date, campaignData.CA_End_Date);

    const newCampaign = {
      CA_Name: campaignData.CA_Name,
      CA_Campaign_Identifier: campaignData.CA_Campaign_Identifier,
      CA_Division: campaignData.CA_Division || '',
      CA_Status: campaignData.CA_Status,
      CA_Quarter: campaignData.CA_Quarter,
      CA_Year: campaignData.CA_Year,
      CA_Creative_Folder: campaignData.CA_Creative_Folder || '',
      CA_Custom_Dim_1: campaignData.CA_Custom_Dim_1 || '',
      CA_Custom_Dim_2: campaignData.CA_Custom_Dim_2 || '',
      CA_Custom_Dim_3: campaignData.CA_Custom_Dim_3 || '',
      CA_Start_Date: campaignData.CA_Start_Date,
      CA_End_Date: campaignData.CA_End_Date,
      CA_Sprint_Dates: calculatedSprintDates, // ‚úÖ TOUJOURS calcul√© automatiquement
      CA_Last_Edit: now,
      CA_Budget: parseFloat(campaignData.CA_Budget) || 0,
      CA_Currency: campaignData.CA_Currency || 'CAD',
      CA_Custom_Fee_1: campaignData.CA_Custom_Fee_1 ? parseFloat(campaignData.CA_Custom_Fee_1) : null,
      CA_Custom_Fee_2: campaignData.CA_Custom_Fee_2 ? parseFloat(campaignData.CA_Custom_Fee_2) : null,
      CA_Custom_Fee_3: campaignData.CA_Custom_Fee_3 ? parseFloat(campaignData.CA_Custom_Fee_3) : null,
      CA_Client: CA_Client,
      CA_Client_Ext_Id: campaignData.CA_Client_Ext_Id || '',
      CA_PO: campaignData.CA_PO || '',
      CA_Billing_ID: campaignData.CA_Billing_ID || '',
      createdAt: now,
      updatedAt: now,
    };

    const docRef = await addDoc(campaignsCollection, newCampaign);
    console.log(`‚úÖ Campagne cr√©√©e avec Sprint Dates automatiques: ${calculatedSprintDates}`);
    
    await createOriginalVersion(CA_Client, docRef.id, userEmail);

    if (additionalBreakdowns.length > 0) {
      const { createBreakdown } = await import('./breakdownService');
      for (const breakdown of additionalBreakdowns) {
        await createBreakdown(CA_Client, docRef.id, breakdown, breakdown.isDefault || false);
      }
    } else {
      if (campaignData.CA_Start_Date && campaignData.CA_End_Date) {
        await createDefaultBreakdown(
          CA_Client,
          docRef.id,
          campaignData.CA_Start_Date,
          campaignData.CA_End_Date
        );
      }
    }

    return docRef.id;
  } catch (error) {
    console.error('Erreur lors de la cr√©ation de la campagne:', error);
    throw error;
  }
}

/**
 * ‚úÖ MODIFI√â : Met √† jour une campagne existante dans Firebase avec validation des dates int√©gr√©e.
 * Si les dates de d√©but ou de fin de la campagne changent, met √† jour les dates du breakdown par d√©faut.
 * @param CA_Client L'identifiant du client.
 * @param campaignId L'identifiant de la campagne √† mettre √† jour.
 * @param campaignData Les donn√©es du formulaire mises √† jour pour la campagne.
 * @returns Une promesse qui r√©sout une fois la mise √† jour termin√©e.
 * @throws Error si les nouvelles donn√©es ne passent pas la validation.
 */
export async function updateCampaign(
  CA_Client: string,
  campaignId: string,
  campaignData: CampaignFormData
): Promise<void> {
  try {
    // ‚úÖ NOUVELLE √âTAPE : Validation des donn√©es avant mise √† jour
    console.log('üìù Validation des donn√©es de campagne pour mise √† jour...');
    const validation = validateCampaignDates(campaignData);
    
    if (!validation.isValid) {
      const errorMessages = validation.errors.map(error => 
        getErrorMessage(error.code, {
          date: error.field === 'CA_Start_Date' ? campaignData.CA_Start_Date : 
                error.field === 'CA_End_Date' ? campaignData.CA_End_Date : undefined,
          startDate: campaignData.CA_Start_Date,
          endDate: campaignData.CA_End_Date,
          currentLevel: 'campaign'
        })
      );
      
      throw new Error(`Donn√©es de campagne invalides :\n${errorMessages.join('\n')}`);
    }

    // ‚úÖ NOUVELLE √âTAPE : V√©rifier l'impact sur les entit√©s enfants
    const impactValidation = await validateCampaignModificationImpact(
      CA_Client,
      campaignId,
      { startDate: campaignData.CA_Start_Date, endDate: campaignData.CA_End_Date }
    );

    if (!impactValidation.isValid) {
      const warningMessage = `Cette modification affectera des entit√©s existantes:\n` +
        impactValidation.affectedTactiques.map(t => `- Tactique "${t.label}": ${t.issue}`).join('\n') +
        impactValidation.affectedPlacements.map(p => `- Placement "${p.label}": ${p.issue}`).join('\n');
      
      console.warn('‚ö†Ô∏è Impact d√©tect√© lors de la modification de campagne:', warningMessage);
      // Note: Dans une UI, on pourrait demander confirmation √† l'utilisateur ici
    }

    console.log("FIREBASE: √âCRITURE - Fichier: campaignService.ts - Fonction: updateCampaign - Path: clients/${CA_Client}/campaigns/${campaignId}");
    const campaignRef = doc(db, 'clients', CA_Client, 'campaigns', campaignId);
    const now = new Date().toISOString();

    // R√©cup√©rer l'ancienne campagne pour comparer les dates
    const oldCampaigns = await getCampaigns(CA_Client);
    const oldCampaign = oldCampaigns.find(c => c.id === campaignId);

    // ‚úÖ MODIFI√â : Sprint Dates TOUJOURS calcul√©es automatiquement (ignorer toute valeur du formulaire)
    const calculatedSprintDates = calculateSprintDates(campaignData.CA_Start_Date, campaignData.CA_End_Date);

    const updatedCampaign = {
      CA_Name: campaignData.CA_Name,
      CA_Campaign_Identifier: campaignData.CA_Campaign_Identifier,
      CA_Division: campaignData.CA_Division || '',
      CA_Status: campaignData.CA_Status,
      CA_Quarter: campaignData.CA_Quarter,
      CA_Year: campaignData.CA_Year,
      CA_Creative_Folder: campaignData.CA_Creative_Folder || '',
      CA_Custom_Dim_1: campaignData.CA_Custom_Dim_1 || '',
      CA_Custom_Dim_2: campaignData.CA_Custom_Dim_2 || '',
      CA_Custom_Dim_3: campaignData.CA_Custom_Dim_3 || '',
      CA_Start_Date: campaignData.CA_Start_Date,
      CA_End_Date: campaignData.CA_End_Date,
      CA_Sprint_Dates: calculatedSprintDates, // ‚úÖ TOUJOURS calcul√© automatiquement
      CA_Last_Edit: now,
      CA_Budget: parseFloat(campaignData.CA_Budget) || 0,
      CA_Currency: campaignData.CA_Currency || 'CAD',
      CA_Custom_Fee_1: campaignData.CA_Custom_Fee_1 ? parseFloat(campaignData.CA_Custom_Fee_1) : null,
      CA_Custom_Fee_2: campaignData.CA_Custom_Fee_2 ? parseFloat(campaignData.CA_Custom_Fee_2) : null,
      CA_Custom_Fee_3: campaignData.CA_Custom_Fee_3 ? parseFloat(campaignData.CA_Custom_Fee_3) : null,
      CA_Client_Ext_Id: campaignData.CA_Client_Ext_Id || '',
      CA_PO: campaignData.CA_PO || '',
      CA_Billing_ID: campaignData.CA_Billing_ID || '',
      updatedAt: now,
    };

    await updateDoc(campaignRef, updatedCampaign);
    console.log(`‚úÖ Campagne mise √† jour avec Sprint Dates automatiques: ${calculatedSprintDates}`);

    // Mettre √† jour les breakdowns si les dates ont chang√©
    if (oldCampaign &&
      (oldCampaign.CA_Start_Date !== campaignData.CA_Start_Date ||
        oldCampaign.CA_End_Date !== campaignData.CA_End_Date)) {
      
      console.log('üìÖ Dates modifi√©es, mise √† jour des breakdowns par d√©faut...');
      await ensureDefaultBreakdownExists(
        CA_Client,
        campaignId,
        campaignData.CA_Start_Date,
        campaignData.CA_End_Date
      );
      await updateDefaultBreakdownDates(
        CA_Client,
        campaignId,
        campaignData.CA_Start_Date,
        campaignData.CA_End_Date
      );
    }
  } catch (error) {
    console.error('Erreur lors de la mise √† jour de la campagne:', error);
    throw error;
  }
}

/**
 * Supprime une campagne ainsi que toutes ses sous-collections (versions et breakdowns) de Firebase.
 * @param CA_Client L'identifiant du client.
 * @param campaignId L'identifiant de la campagne √† supprimer.
 * @returns Une promesse qui r√©sout une fois la suppression termin√©e.
 */
export async function deleteCampaign(
  CA_Client: string,
  campaignId: string
): Promise<void> {
  try {
    const subcollections = ['versions', 'breakdowns'];
    for (const subcollection of subcollections) {
      console.log("FIREBASE: LECTURE - Fichier: campaignService.ts - Fonction: deleteCampaign - Path: clients/${CA_Client}/campaigns/${campaignId}/${subcollection}");
      const subRef = collection(db, 'clients', CA_Client, 'campaigns', campaignId, subcollection);
      const snapshot = await getDocs(subRef);
      for (const doc of snapshot.docs) {
        console.log("FIREBASE: √âCRITURE - Fichier: campaignService.ts - Fonction: deleteCampaign - Path: ${doc.ref.path}");
        await deleteDoc(doc.ref);
      }
    }
    console.log("FIREBASE: √âCRITURE - Fichier: campaignService.ts - Fonction: deleteCampaign - Path: clients/${CA_Client}/campaigns/${campaignId}");
    const campaignRef = doc(db, 'clients', CA_Client, 'campaigns', campaignId);
    await deleteDoc(campaignRef);
  } catch (error) {
    console.error('Erreur lors de la suppression de la campagne:', error);
    throw error;
  }
}

/**
 * Duplique une campagne existante, y compris ses versions et ses breakdowns,
 * et cr√©e une nouvelle campagne avec les donn√©es copi√©es.
 * @param CA_Client L'identifiant du client.
 * @param sourceCampaignId L'identifiant de la campagne source √† dupliquer.
 * @param userEmail L'e-mail de l'utilisateur qui effectue la duplication.
 * @param newName Un nouveau nom optionnel pour la campagne dupliqu√©e.
 * @returns L'identifiant du document de la nouvelle campagne dupliqu√©e.
 */
export async function duplicateCampaign(
  CA_Client: string,
  sourceCampaignId: string,
  userEmail: string,
  newName?: string
): Promise<string> {
  try {
    const campaigns = await getCampaigns(CA_Client);
    const sourceCampaign = campaigns.find(c => c.id === sourceCampaignId);
    if (!sourceCampaign) {
      throw new Error('Campagne source non trouv√©e');
    }

    const newCampaignData: any = { ...sourceCampaign };
    delete newCampaignData.id;
    delete newCampaignData.officialVersionId;

    const originalName = sourceCampaign.CA_Name || 'Campagne sans nom';
    newCampaignData.CA_Name = newName || `${originalName} - Copie`;
    newCampaignData.CA_Status = 'Draft';
    newCampaignData.createdAt = new Date().toISOString();
    newCampaignData.updatedAt = new Date().toISOString();
    newCampaignData.CA_Last_Edit = new Date().toISOString();

    console.log("FIREBASE: √âCRITURE - Fichier: campaignService.ts - Fonction: duplicateCampaign - Path: clients/${CA_Client}/campaigns");
    const campaignsCollection = collection(db, 'clients', CA_Client, 'campaigns');
    const docRef = await addDoc(campaignsCollection, newCampaignData);
    const newCampaignId = docRef.id;

    await duplicateCompleteCampaign(CA_Client, sourceCampaignId, newCampaignId);

    return newCampaignId;

  } catch (error) {
    console.error('Erreur lors de la duplication compl√®te de campagne:', error);
    throw error;
  }
}

// ==================== NOUVELLES FONCTIONS UTILITAIRES ====================

/**
 * ‚úÖ NOUVEAU : Valide une campagne et retourne des suggestions d'am√©lioration
 */
export function validateCampaignWithSuggestions(campaignData: CampaignFormData): {
  validation: CampaignValidationResult;
  suggestions: string[];
  warnings: string[];
} {
  const validation = validateCampaignDates(campaignData);
  const suggestions: string[] = [];
  const warnings: string[] = [];

  // ‚úÖ SUPPRIM√â : Suggestions invent√©es sur la dur√©e des campagnes
  // Seules les validations demand√©es sont conserv√©es

  return { validation, suggestions, warnings };
}

/**
 * ‚úÖ NOUVEAU : Calcule les statistiques d'une campagne
 */
export function getCampaignDateStats(campaign: Campaign | CampaignFormData): {
  duration: number;
  sprintDatesFormatted: string;
  isValidRange: boolean;
  quarterMatch: boolean;
} {
  const duration = isValidDateString(campaign.CA_Start_Date) && isValidDateString(campaign.CA_End_Date)
    ? daysBetween(campaign.CA_Start_Date, campaign.CA_End_Date)
    : 0;

  const sprintDatesFormatted = calculateSprintDates(campaign.CA_Start_Date, campaign.CA_End_Date);
  const isValidRange = duration > 0;
  
  // V√©rification basique de correspondance trimestre (peut √™tre am√©lior√©e)
  const quarterMatch = true; // Logique √† impl√©menter selon vos besoins

  return {
    duration,
    sprintDatesFormatted,
    isValidRange,
    quarterMatch
  };
}