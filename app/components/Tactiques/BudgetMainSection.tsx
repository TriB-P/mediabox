// app/components/Tactiques/BudgetMainSection.tsx

'use client';

import React, { memo, useCallback, useMemo } from 'react';
import { createLabelWithHelp } from './TactiqueFormComponents';

// ==================== TYPES ====================

interface ListItem {
  id: string;
  SH_Display_Name_FR: string;
}

interface BudgetMainSectionProps {
  // Donn√©es du formulaire
  formData: {
    TC_Budget?: number;
    TC_Currency?: string;
    TC_Cost_Per_Unit?: number;
    TC_Unit_Volume?: number;
    TC_Budget_Mode?: 'client' | 'media';
    TC_Has_Bonus?: boolean;
    TC_Bonus_Value?: number;
    TC_Unit_Type?: string; // AJOUT√â: Type d'unit√© s√©lectionn√©
  };
  
  // NOUVEAU: Options pour les types d'unit√©
  unitTypeOptions: ListItem[];
  
  // Donn√©es externes pour les calculs
  totalFees: number; // Total des frais calcul√©s
  
  // Gestionnaires d'√©v√©nements
  onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => void;
  onTooltipChange: (tooltip: string | null) => void;
  onCalculatedChange: (field: string, value: number) => void;
  
  // √âtat de chargement
  disabled?: boolean;
}

// ==================== COMPOSANT PRINCIPAL ====================

const BudgetMainSection = memo<BudgetMainSectionProps>(({
  formData,
  unitTypeOptions,
  totalFees,
  onChange,
  onTooltipChange,
  onCalculatedChange,
  disabled = false
}) => {
  
  // Extraire les valeurs du formulaire
  const budget = formData.TC_Budget || 0;
  const costPerUnit = formData.TC_Cost_Per_Unit || 0;
  const unitVolume = formData.TC_Unit_Volume || 0;
  const currency = formData.TC_Currency || 'CAD';
  const budgetMode = formData.TC_Budget_Mode || 'media';
  const hasBonus = formData.TC_Has_Bonus || false;
  const bonusValue = formData.TC_Bonus_Value || 0;
  const selectedUnitType = formData.TC_Unit_Type || '';

  // NOUVEAU: Logique pour d√©terminer le type d'unit√© et ses propri√©t√©s
  const unitTypeInfo = useMemo(() => {
    if (!selectedUnitType || unitTypeOptions.length === 0) {
      return {
        displayName: '',
        isImpressions: false,
        costLabel: 'Co√ªt par unit√©',
        volumeLabel: 'Volume d\'unit√©',
        volumeTooltip: 'Nombre d\'unit√©s calcul√© automatiquement selon la formule : (Budget m√©dia + Bonification) √∑ Co√ªt par unit√©. Ce champ est en lecture seule et calcul√© par le syst√®me.'
      };
    }

    const selectedUnit = unitTypeOptions.find(unit => unit.id === selectedUnitType);
    if (!selectedUnit) {
      return {
        displayName: '',
        isImpressions: false,
        costLabel: 'Co√ªt par unit√©',
        volumeLabel: 'Volume d\'unit√©',
        volumeTooltip: 'Nombre d\'unit√©s calcul√© automatiquement selon la formule : (Budget m√©dia + Bonification) √∑ Co√ªt par unit√©. Ce champ est en lecture seule et calcul√© par le syst√®me.'
      };
    }

    const displayName = selectedUnit.SH_Display_Name_FR;
    const isImpressions = displayName.toLowerCase() === 'impressions' || displayName.toLowerCase() === 'impression';
    
    let costLabel, volumeLabel, volumeTooltip;
    
    if (isImpressions) {
      costLabel = 'CPM';
      volumeLabel = 'Volume d\'impressions';
      volumeTooltip = 'Nombre total d\'impressions calcul√© automatiquement. Le CPM repr√©sente le co√ªt pour 1000 impressions.';
    } else {
      costLabel = `Co√ªt par ${displayName}`;
      volumeLabel = `Volume de ${displayName}`;
      volumeTooltip = `Nombre de ${displayName} calcul√© automatiquement selon la formule : (Budget m√©dia + Bonification) √∑ Co√ªt par ${displayName}. Ce champ est en lecture seule et calcul√© par le syst√®me.`;
    }

    return {
      displayName,
      isImpressions,
      costLabel,
      volumeLabel,
      volumeTooltip
    };
  }, [selectedUnitType, unitTypeOptions]);

  // D√©terminer l'√©tiquette et la description du budget selon le mode
  const budgetConfig = useMemo(() => {
    if (budgetMode === 'client') {
      return {
        label: 'Budget client',
        tooltip: 'Montant total que le client paiera, incluant le budget m√©dia et tous les frais applicables. Le budget m√©dia sera calcul√© en d√©duisant les frais de ce montant.'
      };
    } else {
      return {
        label: 'Budget m√©dia',
        tooltip: 'Montant net qui sera effectivement d√©pens√© sur les plateformes publicitaires, sans les frais. Le volume d\'unit√©s sera calcul√© sur ce montant plus la bonification.'
      };
    }
  }, [budgetMode]);

  // NOUVEAU: Calcul simple du budget m√©dia (pour affichage informatif seulement)
  // La vraie logique de calcul est maintenant dans TactiqueFormBudget.tsx
  const displayMediaBudget = useMemo(() => {
    if (budgetMode === 'client') {
      // En mode client, estimation simple pour l'affichage
      return Math.max(0, budget - totalFees);
    } else {
      // En mode m√©dia, le budget saisi EST le budget m√©dia
      return budget;
    }
  }, [budget, totalFees, budgetMode]);

  // Calcul du budget effectif pour le volume (m√©dia + bonification) - pour affichage
  const effectiveBudgetForVolume = useMemo(() => {
    const baseBudget = displayMediaBudget;
    const bonus = hasBonus ? bonusValue : 0;
    return baseBudget + bonus;
  }, [displayMediaBudget, hasBonus, bonusValue]);

  // Calcul du budget client effectif (pour affichage informatif seulement)
  const displayClientBudget = useMemo(() => {
    if (budgetMode === 'client') {
      // En mode client, le budget saisi EST le budget client
      return budget;
    } else {
      // En mode m√©dia, on ajoute les frais au budget saisi
      return budget + totalFees;
    }
  }, [budget, totalFees, budgetMode]);

  // Volume affich√© - directement depuis TC_Unit_Volume (d√©j√† ajust√© si impressions)
  const displayVolume = useMemo(() => {
    return unitVolume; // Pas de conversion, la valeur est d√©j√† correcte
  }, [unitVolume]);

  // Gestionnaire pour le changement de budget
  const handleBudgetChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    onChange(e); // Mettre √† jour le budget principal
    // Note: Le volume sera recalcul√© automatiquement par la logique parent
  }, [onChange]);

  // Gestionnaire pour le changement de co√ªt par unit√©
  const handleCostChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const newCost = parseFloat(e.target.value) || 0;
    onCalculatedChange('TC_Cost_Per_Unit', newCost);
    // Note: Le volume sera recalcul√© automatiquement par la logique parent
  }, [onCalculatedChange]);

  // D√©terminer les statuts de calcul (pour l'affichage des messages)
  const calculationStatus = useMemo(() => {
    const hasValidBudget = budget > 0;
    const hasValidMediaBudget = displayMediaBudget > 0;
    const hasValidCost = costPerUnit > 0;
    const hasValidEffectiveBudget = effectiveBudgetForVolume > 0;
    
    return {
      canCalculateVolume: hasValidCost && hasValidEffectiveBudget,
      hasPartialData: hasValidBudget || hasValidCost,
      isComplete: hasValidCost && hasValidEffectiveBudget,
      mediaBudgetValid: hasValidMediaBudget,
      effectiveBudgetValid: hasValidEffectiveBudget
    };
  }, [budget, displayMediaBudget, costPerUnit, effectiveBudgetForVolume]);

  // Formater les nombres pour l'affichage
  const formatCurrency = useCallback((value: number) => {
    return new Intl.NumberFormat('fr-CA', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(value);
  }, []);

  const formatCostPerUnit = useCallback((value: number) => {
    return new Intl.NumberFormat('fr-CA', {
      minimumFractionDigits: 4,
      maximumFractionDigits: 6
    }).format(value);
  }, []);

  const formatVolume = useCallback((value: number) => {
    // Pour les impressions, formater en nombre entier
    if (unitTypeInfo.isImpressions) {
      return new Intl.NumberFormat('fr-CA', {
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
      }).format(value);
    }
    
    // Pour les autres types, formater en entier
    return new Intl.NumberFormat('fr-CA', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(value);
  }, [unitTypeInfo.isImpressions]);

  return (
    <div className="space-y-6">
      {/* Budget principal */}
      <div>
        <div className="flex items-center gap-3 mb-2">
          {createLabelWithHelp(
            budgetConfig.label, 
            budgetConfig.tooltip, 
            onTooltipChange
          )}
        </div>
        <div className="relative rounded-lg shadow-sm">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <span className="text-gray-500 sm:text-sm font-medium">{currency}</span>
          </div>
          <input
            type="number"
            id="TC_Budget"
            name="TC_Budget"
            value={budget || ''}
            onChange={handleBudgetChange}
            min="0"
            step="0.01"
            disabled={disabled}
            className="block w-full pl-12 pr-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 disabled:opacity-50 disabled:bg-gray-100"
            placeholder="0.00"
          />
        </div>
      </div>

      {/* Affichage informatif du budget m√©dia si en mode client */}
      {budgetMode === 'client' && budget > 0 && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h5 className="text-sm font-medium text-blue-800 mb-2">
            üí° Calcul du budget m√©dia
          </h5>
          <div className="text-sm text-blue-700">
            <div className="flex justify-between items-center">
              <span>Budget client saisi :</span>
              <span className="font-medium">{formatCurrency(budget)} {currency}</span>
            </div>
            <div className="flex justify-between items-center">
              <span>Budget m√©dia estim√© :</span>
              <span className="font-medium">{formatCurrency(displayMediaBudget)} {currency}</span>
            </div>
            <div className="flex justify-between items-center">
              <span>Frais applicables :</span>
              <span className="font-medium">{formatCurrency(totalFees)} {currency}</span>
            </div>
            <div className="flex justify-between items-center border-t border-blue-300 pt-2 mt-2 font-semibold">
              <span>V√©rification :</span>
              <span className="text-blue-800">{formatCurrency(displayMediaBudget + totalFees)} {currency}</span>
            </div>
            <div className="text-xs text-blue-600 mt-2">
              üí° Les calculs exacts sont effectu√©s automatiquement par le syst√®me.
            </div>
          </div>
        </div>
      )}

      {/* Affichage informatif du budget client si en mode m√©dia */}
      {budgetMode === 'media' && budget > 0 && totalFees > 0 && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <h5 className="text-sm font-medium text-green-800 mb-2">
            üí∞ Budget client total
          </h5>
          <div className="text-sm text-green-700">
            <div className="flex justify-between items-center">
              <span>Budget m√©dia saisi :</span>
              <span className="font-medium">{formatCurrency(budget)} {currency}</span>
            </div>
            <div className="flex justify-between items-center">
              <span>Plus total des frais :</span>
              <span className="font-medium">+{formatCurrency(totalFees)} {currency}</span>
            </div>
            <div className="flex justify-between items-center border-t border-green-300 pt-2 mt-2 font-semibold">
              <span>Budget client factur√© :</span>
              <span className="text-green-800">{formatCurrency(displayClientBudget)} {currency}</span>
            </div>
          </div>
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Co√ªt par unit√© - OBLIGATOIRE avec label dynamique */}
        <div>
          <div className="flex items-center gap-3 mb-2">
            {createLabelWithHelp(
              `${unitTypeInfo.costLabel} *`, 
              unitTypeInfo.isImpressions 
                ? 'Co√ªt pour 1000 impressions (CPM). Ce champ est obligatoire et doit √™tre saisi manuellement.'
                : `Co√ªt unitaire pour ${unitTypeInfo.displayName || 'le type d\'unit√© s√©lectionn√©'}. Ce champ est obligatoire et doit √™tre saisi manuellement.`, 
              onTooltipChange
            )}
          </div>
          <div className="relative rounded-lg shadow-sm">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <span className="text-gray-500 sm:text-sm font-medium">{currency}</span>
            </div>
            <input
              type="number"
              value={costPerUnit || ''}
              onChange={handleCostChange}
              min="0"
              step="0.0001"
              disabled={disabled}
              required
              className="block w-full pl-12 pr-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 disabled:opacity-50 disabled:bg-gray-100"
              placeholder="0.0000"
            />
          </div>
          {costPerUnit > 0 && (
            <div className="mt-1 text-xs text-gray-500">
              Format√© : {formatCostPerUnit(costPerUnit)} {currency}
              {unitTypeInfo.isImpressions && ' (pour 1000 impressions)'}
            </div>
          )}
          {costPerUnit === 0 && (
            <div className="mt-1 text-xs text-red-600">
              Champ obligatoire pour calculer le volume
            </div>
          )}
        </div>

        {/* Volume d'unit√© - CALCUL√â AUTOMATIQUEMENT avec label dynamique */}
        <div>
          <div className="flex items-center gap-3 mb-2">
            {createLabelWithHelp(
              `${unitTypeInfo.volumeLabel} (calcul√©)`, 
              unitTypeInfo.volumeTooltip, 
              onTooltipChange
            )}
          </div>
          <input
            type="number"
            value={displayVolume || ''}
            disabled
            className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm bg-gray-100 text-gray-700 font-medium"
            placeholder="Calcul√© automatiquement"
          />
          {displayVolume > 0 && (
            <div className="mt-1 text-xs text-gray-500">
              Format√© : {formatVolume(displayVolume)} {unitTypeInfo.isImpressions ? 'impressions' : (unitTypeInfo.displayName || 'unit√©s')}
            </div>
          )}
          {effectiveBudgetForVolume > 0 && costPerUnit > 0 && (
            <div className="mt-1 text-xs text-green-600">
              = {formatCurrency(effectiveBudgetForVolume)} {currency} √∑ {formatCostPerUnit(costPerUnit)} {currency}
              {unitTypeInfo.isImpressions && ' √ó 1000'}
            </div>
          )}
          {!calculationStatus.canCalculateVolume && budget > 0 && (
            <div className="mt-1 text-xs text-orange-600">
              N√©cessite un co√ªt par unit√© valide pour le calcul
            </div>
          )}
        </div>
      </div>

      {/* NOUVEAU: Information sur le type d'unit√© s√©lectionn√© */}
      {unitTypeInfo.displayName && (
        <div className="bg-indigo-50 border border-indigo-200 rounded-lg p-3">
          <div className="flex items-center gap-2">
            <span className="text-indigo-600">üìä</span>
            <div className="text-sm text-indigo-800">
              <strong>Type d'unit√© :</strong> {unitTypeInfo.displayName}
              {unitTypeInfo.isImpressions && (
                <span className="ml-2 text-xs bg-indigo-200 px-2 py-0.5 rounded-full">
                  CPM (Co√ªt pour 1000)
                </span>
              )}
            </div>
          </div>
          {unitTypeInfo.isImpressions && (
            <div className="text-xs text-indigo-600 mt-1">
              üí° Pour les impressions, le volume affich√© correspond au nombre total d'impressions (CPM √ó 1000).
            </div>
          )}
        </div>
      )}

      {/* Message si donn√©es incompl√®tes */}
      {(!budget || !costPerUnit) && !disabled && (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
          <div className="text-sm text-yellow-700">
            ‚ö†Ô∏è <strong>Configuration incompl√®te</strong>
            <ul className="mt-2 ml-4 space-y-1 text-xs">
              {!budget && <li>‚Ä¢ Saisir un budget ({budgetMode === 'client' ? 'client' : 'm√©dia'})</li>}
              {!costPerUnit && <li>‚Ä¢ Saisir un {unitTypeInfo.costLabel.toLowerCase()}</li>}
            </ul>
          </div>
        </div>
      )}

      {/* Message si champs d√©sactiv√©s */}
      {disabled && (
        <div className="bg-yellow-50 border border-yellow-200 text-yellow-700 px-4 py-3 rounded-lg">
          <p className="text-sm">
            ‚è≥ Chargement en cours... Les calculs budg√©taires seront disponibles une fois les donn√©es charg√©es.
          </p>
        </div>
      )}
    </div>
  );
});

BudgetMainSection.displayName = 'BudgetMainSection';

export default BudgetMainSection;