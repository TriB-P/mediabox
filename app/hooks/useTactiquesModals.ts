// app/hooks/useTactiquesModals.ts - Version avec fonctions onglets impl√©ment√©es

import { useState, useCallback } from 'react';
import { useSelection } from '../contexts/SelectionContext';
import { useClient } from '../contexts/ClientContext';
import {
  Section,
  Onglet
} from '../types/tactiques';
import { Campaign } from '../types/campaign';
import {
  addSection,
  updateSection,
  deleteSection,
  addOnglet,
  updateOnglet,
  deleteOnglet
} from '../lib/tactiqueService';
import { useDataFlow } from './useDataFlow';

// ==================== TYPES ====================

interface SectionModalState {
  isOpen: boolean;
  section: Section | null;
  mode: 'create' | 'edit';
}

interface UseTactiquesModalsProps {
  selectedCampaign: Campaign | null;
  onglets: Onglet[];
  selectedOnglet: Onglet | null;
  sections: Section[];
  onRefresh: (() => Promise<void>) | (() => void);
}

interface UseTactiquesModalsReturn {
  // √âtats des modals
  sectionModal: SectionModalState;
  
  // Fonctions de gestion des modals
  handleSaveSection: (sectionData: any) => Promise<void>;
  closeSectionModal: () => void;
  
  // Op√©rations sections
  handleAddSection: () => void;
  handleEditSection: (sectionId: string) => void;
  handleDeleteSection: (sectionId: string) => void;
  
  // Op√©rations onglets  
  handleAddOnglet: () => Promise<void>;
  handleRenameOnglet: (ongletId: string, newName?: string) => Promise<void>;
  handleDeleteOnglet: (ongletId: string) => Promise<void>;
}

// ==================== HOOK PRINCIPAL ====================

export const useTactiquesModals = ({
  selectedCampaign,
  onglets,
  selectedOnglet,
  sections,
  onRefresh
}: UseTactiquesModalsProps): UseTactiquesModalsReturn => {

  const { selectedClient } = useClient();
  const { selectedCampaignId, selectedVersionId, selectedOngletId, setSelectedOngletId } = useSelection();

  // Utilisation de useDataFlow pour les op√©rations qui n√©cessitent du feedback
  const dataFlow = useDataFlow({ 
    enableDebug: process.env.NODE_ENV === 'development' 
  });

  // ==================== √âTATS DES MODALS ====================

  const [sectionModal, setSectionModal] = useState<SectionModalState>({
    isOpen: false,
    section: null,
    mode: 'create'
  });

  // ==================== UTILITAIRES ====================

  const ensureContext = () => {
    if (!selectedClient?.clientId || !selectedCampaignId || !selectedVersionId || !selectedOngletId) {
      throw new Error('Contexte manquant pour l\'op√©ration sur les modals');
    }
    return {
      clientId: selectedClient.clientId,
      campaignId: selectedCampaignId,
      versionId: selectedVersionId,
      ongletId: selectedOngletId
    };
  };

  // ==================== GESTION DES SECTIONS ====================

  const handleAddSection = useCallback(() => {
    console.log('üìã Ouverture modal nouvelle section');
    setSectionModal({
      isOpen: true,
      section: null,
      mode: 'create'
    });
  }, []);

  const handleEditSection = useCallback((sectionId: string) => {
    console.log('‚úèÔ∏è Ouverture modal √©dition section:', sectionId);
    const section = sections.find(s => s.id === sectionId);
    if (section) {
      setSectionModal({
        isOpen: true,
        section,
        mode: 'edit'
      });
    } else {
      console.warn('‚ö†Ô∏è Section non trouv√©e pour √©dition:', sectionId);
    }
  }, [sections]);

  const handleSaveSection = useCallback(async (sectionData: any) => {
    const context = ensureContext();

    try {
      dataFlow.startOperationLoading('Sauvegarde section');

      if (sectionModal.mode === 'create') {
        console.log('‚ûï Cr√©ation nouvelle section');
        const newSectionData = {
          SECTION_Name: sectionData.SECTION_Name,
          SECTION_Order: sections.length,
          SECTION_Color: sectionData.SECTION_Color || '#6366f1',
          SECTION_Budget: 0
        };

        await addSection(
          context.clientId,
          context.campaignId,
          context.versionId,
          context.ongletId,
          newSectionData
        );
        console.log('‚úÖ Section cr√©√©e avec succ√®s');

      } else if (sectionModal.section) {
        console.log('üíæ Mise √† jour section existante');
        await updateSection(
          context.clientId,
          context.campaignId,
          context.versionId,
          context.ongletId,
          sectionModal.section.id,
          sectionData
        );
        console.log('‚úÖ Section mise √† jour avec succ√®s');
      }

      // Fermer le modal et rafra√Æchir
      setSectionModal(prev => ({ ...prev, isOpen: false }));
      await Promise.resolve(onRefresh());

    } catch (error) {
      console.error('‚ùå Erreur sauvegarde section:', error);
      dataFlow.setError('Erreur lors de la sauvegarde de la section');
      throw error;
    } finally {
      dataFlow.stopLoading();
    }
  }, [
    sectionModal.mode,
    sectionModal.section,
    sections.length,
    onRefresh,
    dataFlow
  ]);

  const closeSectionModal = useCallback(() => {
    console.log('‚ùå Fermeture modal section');
    setSectionModal(prev => ({ ...prev, isOpen: false }));
  }, []);

  const handleDeleteSection = useCallback((sectionId: string) => {
    const context = ensureContext();
    const section = sections.find(s => s.id === sectionId);
    
    if (!section) {
      console.error('‚ö†Ô∏è Section non trouv√©e pour suppression:', sectionId);
      return;
    }

    const confirmMessage = `√ätes-vous s√ªr de vouloir supprimer la section "${section.SECTION_Name}" et toutes ses tactiques ?`;
    
    if (confirm(confirmMessage)) {
      console.log('üóëÔ∏è Suppression section confirm√©e:', section.SECTION_Name);
      
      // D√©marrer l'op√©ration avec feedback
      dataFlow.startOperationLoading('Suppression section');
      
      deleteSection(
        context.clientId,
        context.campaignId,
        context.versionId,
        context.ongletId,
        sectionId
      ).then(async () => {
        console.log('‚úÖ Section supprim√©e avec succ√®s');
        await Promise.resolve(onRefresh());
      }).catch(error => {
        console.error('‚ùå Erreur suppression section:', error);
        dataFlow.setError('Erreur lors de la suppression de la section');
      }).finally(() => {
        dataFlow.stopLoading();
      });
    }
  }, [sections, onRefresh, dataFlow]);

  // ==================== GESTION DES ONGLETS ====================

  const handleAddOnglet = useCallback(async () => {
    // V√©rifier le contexte (sans ongletId car on va en cr√©er un)
    if (!selectedClient?.clientId || !selectedCampaignId || !selectedVersionId) {
      throw new Error('Contexte manquant pour la cr√©ation d\'onglet');
    }

    const newOngletName = prompt('Nom du nouvel onglet:');
    if (!newOngletName?.trim()) {
      return;
    }

    const trimmedName = newOngletName.trim();

    // V√©rifier si un onglet avec ce nom existe d√©j√†
    const nameExists = onglets.some(onglet => 
      onglet.ONGLET_Name.toLowerCase() === trimmedName.toLowerCase()
    );

    if (nameExists) {
      alert(`Un onglet avec le nom "${trimmedName}" existe d√©j√†. Veuillez choisir un nom diff√©rent.`);
      return;
    }

    try {
      dataFlow.startOperationLoading('Cr√©ation onglet');
      console.log('üìù Cr√©ation nouvel onglet:', trimmedName);
      
      const newOngletData = {
        ONGLET_Name: trimmedName,
        ONGLET_Order: onglets.length,
        ONGLET_Color: '#6366f1'
      };
      
      const newOngletId = await addOnglet(
        selectedClient.clientId,
        selectedCampaignId,
        selectedVersionId,
        newOngletData
      );
      
      console.log('‚úÖ Onglet cr√©√© avec succ√®s:', newOngletId);
      
      // Rafra√Æchir les donn√©es
      await Promise.resolve(onRefresh());
      
      // S√©lectionner automatiquement le nouvel onglet
      setSelectedOngletId(newOngletId);
      
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation onglet:', error);
      dataFlow.setError('Erreur lors de la cr√©ation de l\'onglet');
    } finally {
      dataFlow.stopLoading();
    }
  }, [
    selectedClient?.clientId, 
    selectedCampaignId, 
    selectedVersionId,
    onglets.length, 
    onglets,
    onRefresh, 
    setSelectedOngletId,
    dataFlow
  ]);

  const handleRenameOnglet = useCallback(async (ongletId: string, newName?: string) => {
    // V√©rifier le contexte (sans ongletId dans ensureContext car on manipule un onglet sp√©cifique)
    if (!selectedClient?.clientId || !selectedCampaignId || !selectedVersionId) {
      throw new Error('Contexte manquant pour le renommage d\'onglet');
    }

    const onglet = onglets.find(o => o.id === ongletId);
    
    if (!onglet) {
      console.error('‚ö†Ô∏è Onglet non trouv√© pour renommage:', ongletId);
      return;
    }

    const finalNewName = newName || prompt('Nouveau nom pour l\'onglet:', onglet.ONGLET_Name);
    if (!finalNewName?.trim() || finalNewName.trim() === onglet.ONGLET_Name) {
      return;
    }

    const trimmedName = finalNewName.trim();

    // V√©rifier si un autre onglet avec ce nom existe d√©j√†
    const nameExists = onglets.some(otherOnglet => 
      otherOnglet.id !== ongletId && 
      otherOnglet.ONGLET_Name.toLowerCase() === trimmedName.toLowerCase()
    );

    if (nameExists) {
      alert(`Un onglet avec le nom "${trimmedName}" existe d√©j√†. Veuillez choisir un nom diff√©rent.`);
      return;
    }

    try {
      dataFlow.startOperationLoading('Renommage onglet');
      console.log('‚úèÔ∏è Renommage onglet:', onglet.ONGLET_Name, '‚Üí', trimmedName);
      
      await updateOnglet(
        selectedClient.clientId,
        selectedCampaignId,
        selectedVersionId,
        ongletId,
        { ONGLET_Name: trimmedName }
      );
      
      console.log('‚úÖ Onglet renomm√© avec succ√®s');
      await Promise.resolve(onRefresh());
      
    } catch (error) {
      console.error('‚ùå Erreur renommage onglet:', error);
      dataFlow.setError('Erreur lors du renommage de l\'onglet');
    } finally {
      dataFlow.stopLoading();
    }
  }, [
    selectedClient?.clientId,
    selectedCampaignId, 
    selectedVersionId,
    onglets, 
    onRefresh, 
    dataFlow
  ]);

  const handleDeleteOnglet = useCallback(async (ongletId: string) => {
    // V√©rifier le contexte
    if (!selectedClient?.clientId || !selectedCampaignId || !selectedVersionId) {
      throw new Error('Contexte manquant pour la suppression d\'onglet');
    }

    const onglet = onglets.find(o => o.id === ongletId);
    
    if (!onglet) {
      console.error('‚ö†Ô∏è Onglet non trouv√© pour suppression:', ongletId);
      return;
    }

    // Emp√™cher la suppression du dernier onglet
    if (onglets.length <= 1) {
      alert('Impossible de supprimer le dernier onglet');
      return;
    }

    const confirmMessage = `√ätes-vous s√ªr de vouloir supprimer l'onglet "${onglet.ONGLET_Name}" et toutes ses donn√©es ?`;
    
    if (confirm(confirmMessage)) {
      try {
        dataFlow.startOperationLoading('Suppression onglet');
        console.log('üóëÔ∏è Suppression onglet:', onglet.ONGLET_Name);
        
        await deleteOnglet(
          selectedClient.clientId,
          selectedCampaignId,
          selectedVersionId,
          ongletId
        );
        
        console.log('‚úÖ Onglet supprim√© avec succ√®s');
        
        // Si l'onglet supprim√© √©tait s√©lectionn√©, s√©lectionner le premier restant
        if (selectedOngletId === ongletId) {
          const remainingOnglets = onglets.filter(o => o.id !== ongletId);
          if (remainingOnglets.length > 0) {
            setSelectedOngletId(remainingOnglets[0].id);
          }
        }
        
        await Promise.resolve(onRefresh());
        
      } catch (error) {
        console.error('‚ùå Erreur suppression onglet:', error);
        dataFlow.setError('Erreur lors de la suppression de l\'onglet');
      } finally {
        dataFlow.stopLoading();
      }
    }
  }, [
    selectedClient?.clientId,
    selectedCampaignId,
    selectedVersionId,
    onglets, 
    selectedOngletId,
    setSelectedOngletId,
    onRefresh, 
    dataFlow
  ]);

  // ==================== RETURN ====================

  return {
    // √âtats des modals
    sectionModal,
    
    // Fonctions de gestion des modals
    handleSaveSection,
    closeSectionModal,
    
    // Op√©rations sections
    handleAddSection,
    handleEditSection,
    handleDeleteSection,
    
    // Op√©rations onglets
    handleAddOnglet,
    handleRenameOnglet,
    handleDeleteOnglet,
  };
};

// ==================== TYPES EXPORT ====================

export type { UseTactiquesModalsProps, UseTactiquesModalsReturn, SectionModalState };